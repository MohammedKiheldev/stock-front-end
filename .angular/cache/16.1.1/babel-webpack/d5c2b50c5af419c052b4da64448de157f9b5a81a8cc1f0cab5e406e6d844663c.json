{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthenticationService {\n  constructor(http) {\n    this.http = http;\n    // BASE_PATH: 'http://localhost:8080'\n    this.USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n  }\n  authenticationService(username, password) {\n    return this.http.get(`http://localhost:8080/api/v1/basicauth`, {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    }).pipe(map(res => {\n      this.username = username;\n      this.password = password;\n      this.registerSuccessfulLogin(username, password);\n    }));\n  }\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  }\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem(this.USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n  }\n  logout() {\n    sessionStorage.removeItem(this.USER_NAME_SESSION_ATTRIBUTE_NAME);\n    this.username = null;\n    this.password = null;\n  }\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(this.USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(this.USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  }\n}\nAuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n  return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationService,\n  factory: AuthenticationService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthenticationService };","map":{"version":3,"names":["map","AuthenticationService","constructor","http","USER_NAME_SESSION_ATTRIBUTE_NAME","authenticationService","username","password","get","headers","authorization","createBasicAuthToken","pipe","res","registerSuccessfulLogin","window","btoa","sessionStorage","setItem","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/mohammed/stock-front-end/src/app/login/authentication.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n\n  // BASE_PATH: 'http://localhost:8080'\n  USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\n  public username!: String;\n  public password!: String;\n\n  constructor(private http: HttpClient) {\n\n  }\n\n  authenticationService(username: String, password: String) {\n    return this.http.get(`http://localhost:8080/api/v1/basicauth`,\n      { headers: { authorization: this.createBasicAuthToken(username, password) } }).pipe(map((res) => {\n        this.username = username;\n        this.password = password;\n        this.registerSuccessfulLogin(username, password);\n      }));\n  }\n  createBasicAuthToken(username: String, password: String) {\n    return 'Basic ' + window.btoa(username + \":\" + password)\n  }\n\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem(this.USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n  }\n\n  logout() {\n    sessionStorage.removeItem(this.USER_NAME_SESSION_ATTRIBUTE_NAME);\n    this.username = null;\n    this.password = null;\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(this.USER_NAME_SESSION_ATTRIBUTE_NAME)\n    if (user === null) return false\n    return true\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(this.USER_NAME_SESSION_ATTRIBUTE_NAME)\n    if (user === null) return ''\n    return user\n  }\n}"],"mappings":"AAEA,SAASA,GAAG,QAAQ,gBAAgB;;;AAEpC,MAGaC,qBAAqB;EAQhCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IANxB;IACA,KAAAC,gCAAgC,GAAG,mBAAmB;EAOtD;EAEAC,qBAAqBA,CAACC,QAAgB,EAAEC,QAAgB;IACtD,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAC,wCAAwC,EAC3D;MAAEC,OAAO,EAAE;QAAEC,aAAa,EAAE,IAAI,CAACC,oBAAoB,CAACL,QAAQ,EAAEC,QAAQ;MAAC;IAAE,CAAE,CAAC,CAACK,IAAI,CAACZ,GAAG,CAAEa,GAAG,IAAI;MAC9F,IAAI,CAACP,QAAQ,GAAGA,QAAQ;MACxB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;MACxB,IAAI,CAACO,uBAAuB,CAACR,QAAQ,EAAEC,QAAQ,CAAC;IAClD,CAAC,CAAC,CAAC;EACP;EACAI,oBAAoBA,CAACL,QAAgB,EAAEC,QAAgB;IACrD,OAAO,QAAQ,GAAGQ,MAAM,CAACC,IAAI,CAACV,QAAQ,GAAG,GAAG,GAAGC,QAAQ,CAAC;EAC1D;EAEAO,uBAAuBA,CAACR,QAAQ,EAAEC,QAAQ;IACxCU,cAAc,CAACC,OAAO,CAAC,IAAI,CAACd,gCAAgC,EAAEE,QAAQ,CAAC;EACzE;EAEAa,MAAMA,CAAA;IACJF,cAAc,CAACG,UAAU,CAAC,IAAI,CAAChB,gCAAgC,CAAC;IAChE,IAAI,CAACE,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,QAAQ,GAAG,IAAI;EACtB;EAEAc,cAAcA,CAAA;IACZ,IAAIC,IAAI,GAAGL,cAAc,CAACM,OAAO,CAAC,IAAI,CAACnB,gCAAgC,CAAC;IACxE,IAAIkB,IAAI,KAAK,IAAI,EAAE,OAAO,KAAK;IAC/B,OAAO,IAAI;EACb;EAEAE,mBAAmBA,CAAA;IACjB,IAAIF,IAAI,GAAGL,cAAc,CAACM,OAAO,CAAC,IAAI,CAACnB,gCAAgC,CAAC;IACxE,IAAIkB,IAAI,KAAK,IAAI,EAAE,OAAO,EAAE;IAC5B,OAAOA,IAAI;EACb;;AA5CWrB,qBAAqB,C;mBAArBA,qBAAqB,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAArB3B,qBAAqB,C;SAArBA,qBAAqB;EAAA4B,OAAA,EAArB5B,qBAAqB,CAAA6B,IAAA;EAAAC,UAAA,EAFpB;AAAM;SAEP9B,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}